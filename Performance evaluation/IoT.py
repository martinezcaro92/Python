# Author: Jose Manuel Martinez Caro
# Technical University of Cartagena
# Automatizally generates a config .ini/.ned
# -*- coding: utf-8 -*-

import os
import numpy as np
import matplotlib
import matplotlib.pyplot as plt
import csv
import pandas as pd

position = pd.read_csv('C:/omnetpp-5.2.1/samples/flora/simulations/dataSet3.csv')

# INI FILE GENERATION
file = open("IoT.ini", "w")

file.write("# ---------- Autogenerated file with Python -------- #\n")
file.write("[General]\n")
file.write("network = IoT\n")
file.write('rng-class = "cMersenneTwister"'+os.linesep)



file.write("#  ***** Number of LoRa Gateways (default = 1) ***** #\n")
file.write("**.numberOfGateways = 1\n")
file.write("#  ** Number of LoRa Nodes ** \n")
file.write("**.numberOfNodes = "+str(position.shape[0])+os.linesep)



file.write("#  **** GENERAL PARAMETERS ***** #\n")
file.write("#  ** Number of Packet to Send **  #\n")
file.write("**.numberOfPacketsToSend = 0 #0 means infinite number of packets\n")
file.write("#  ** Simulation time (limit) **  #\n")
file.write("sim-time-limit = 7d\n")
file.write("#  ** Warm-up period ** #\n")
file.write("warmup-period = 1d\n")
file.write("#  ** Simulation time resolution **  #\n")
file.write("simtime-resolution = -11\n"+os.linesep)

file.write("#  ** Simulation start-time **  #\n")
file.write("**.timeToFirstPacket = exponential(100s)\n")
file.write("#  ** Next Packet Period **  #\n")
file.write("**.timeToNextPacket = exponential(100s)\n")
file.write("#  ** Â¿Aloha Channel Model? **  #\n")
file.write("**.alohaChannelModel = false\n"+os.linesep)

file.write("#  ** Energy Consumption Model **  #\n")
file.write('**.loRaNodes[*].LoRaNic.radio.energyConsumerType = "LoRaEnergyConsumer"\n')
file.write("#  ** Energy Source Module ** #\n")
file.write('**.loRaNodes[*].**.energySourceModule = "IdealEpEnergyStorage"\n')
file.write("#  ** Energy Consumption Parameters **  #\n")
file.write('**.loRaNodes[*].LoRaNic.radio.energyConsumer.configFile = xmldoc("energyConsumptionParameters.xml")\n'+os.linesep)

file.write("#  ** Defining Working Area **  #\n")
file.write('**.constraintAreaMinX = 0m\n')
file.write('**.constraintAreaMinY = 0m\n')
file.write('**.constraintAreaMinZ = 0m\n')
file.write('**.constraintAreaMaxX = '+str(position['long'].max())+'m\n')
file.write('**.constraintAreaMaxY = '+str(position['lat'].max())+'m\n')
file.write('**.constraintAreaMaxZ = 0m\n'+os.linesep)

file.write("#  ** Network Size Parameters **  #\n")
file.write('**.networkSizeX = '+str(position['long'].max())+'\n')
file.write('**.networkSizeY = '+str(position['lat'].max())+'\n'+os.linesep)

file.write("#  ** Separate TX/RX Parts (COMMENTED)**  #\n")
file.write('# LoRaNetworkTest.**.radio.separateTransmissionParts = false\n')
file.write('# LoRaNetworkTest.**.radio.separateReceptionParts = false\n'+os.linesep)

file.write("#  ** $\sigma **  #\n")
file.write('**.sigma = 0'+os.linesep)

file.write("#  ** Delay config **  #\n")
file.write('**.delayer.config = xmldoc("cloudDelays.xml")\n')
file.write("#  ** Radio Medium Module Parameters **  #\n")
file.write('**.radio.radioMediumModule = "LoRaMedium"\n')
file.write("#  ** Path-Loss Method **  #\n")
file.write('**.LoRaMedium.pathLossType = "LoRaLogNormalShadowing"\n')
file.write("#  ** Minimum Interface Time **  #\n")
file.write('**.minInterferenceTime = 0s\n')
file.write("#  ** Display Interface Adresses **  #\n")
file.write('**.displayAddresses = false\n'+os.linesep)

file.write("#  **** DEVICES PARAMETERS *****  #\n")
file.write("#  ** LoRaGW[0] - parameters **  #\n")
file.write("**.loRaGW[0].numUdpApps = 1\n")
file.write("**.loRaGW[0].packetForwarder.localPort = 2000\n")
file.write("**.loRaGW[0].packetForwarder.destPort = 1000\n")
file.write('**.loRaGW[0].packetForwarder.destAddresses = "networkServer"\n')
file.write("**.loRaGW[0].packetForwarder.indexNumber = 0\n"+os.linesep)

file.write("#  ** LoRaNodes[*] - parameters **  #\n")
file.write("**.loRaNodes[*].**.initFromDisplayString = false\n")
file.write("**.loRaNodes[*].**.evaluateADRinNode = false\n")
file.write("**.loRaNodes[*].**initialLoRaSF = intuniform(7,12)\n")
file.write('**.loRaNodes[*].**initialLoRaBW = 125 kHz\n')
file.write("**.loRaNodes[*].**initialLoRaCR = 4\n")
file.write("**.loRaNodes[*].**initialLoRaTP = (2dBm + 3dBm*intuniform(0, 4))\n"+os.linesep)

file.write("#  ** networkServer - parameters **  #\n")
file.write("**.networkServer.numUdpApps = 1\n")
file.write("**.networkServer.**.evaluateADRinServer = false\n")
file.write('**.networkServer.udpApp[0].typename = "NetworkServerApp"\n')
file.write('**.networkServer.udpApp[0].destAddresses = "loRaGW[0]"\n')
file.write("**.networkServer.udpApp[0].destPort = 2000\n")
file.write("**.networkServer.udpApp[0].localPort = 1000\n")
file.write('**.networkServer.udpApp[0].adrMethod = ${"avg"}\n'+os.linesep+os.linesep)

file.write("#  **** NODE LOCALIZATION ***** #\n")
for i in range(0,position.shape[0]):
    file.write("#  ** Node: "+position['station_name'][i]+" ("+position['station_id'][i] +") **  #\n")
    file.write("**.loRaNodes["+str(i)+"].**.initialX = "+str(position['long'][i])+"m \n")
    file.write("**.loRaNodes["+str(i)+"].**.initialY = "+str(position['lat'][i])+"m \n\n")

file.write("#  ** GW: LoRaGW  **  #\n")
file.write("**.loRaGW[0].**.initialX = "+str(position['long'].mean())+"m \n")
file.write("**.loRaGW[0].**.initialY = "+str(position['lat'].mean())+"m \n\n")

file.close()